<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Syang's Blog]]></title>
  <subtitle><![CDATA[不断发现，不断学习，不断成长，不断成熟]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.syang.xyz/"/>
  <updated>2015-05-28T05:18:07.000Z</updated>
  <id>http://www.syang.xyz/</id>
  
  <author>
    <name><![CDATA[Syang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ApacheBench & 压力测试]]></title>
    <link href="http://www.syang.xyz/2015/05/20/pressureTest/"/>
    <id>http://www.syang.xyz/2015/05/20/pressureTest/</id>
    <published>2015-05-20T02:06:45.000Z</published>
    <updated>2015-05-28T05:18:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="ApacheBench">ApacheBench</h2><p>最近应用要上线，在上线前给做了个压力测试。之前并没有这方面的经验，也只是倒腾过服务器什么的，所以上网查了些压测的资料，整理了自己做压测的过程。<br>服务器: EC2<br>测试对象: app端api接口<br>测试工具：ApacheBench<br>监控工具: zabbix</p>
<h3 id="简介">简介</h3><p>ApacheBench是一个指令列程式，专门用来执行网站服务器的运行效能，特别是针对Apache网站服务器。这原本是用来检测Apache网站服务器能够提供的效能，特别是可以看出Apache能够提供每秒能送出多少网页。</p>
<h3 id="参数">参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Options are:</span><br><span class="line">-n requests     Number of requests to perform</span><br><span class="line">-c concurrency  Number of multiple requests to make at a time</span><br><span class="line">-t timelimit    Seconds to max. to spend on benchmarking This implies -n 50000</span><br><span class="line">-s timeout      Seconds to max. wait for each response Default is 30 seconds</span><br><span class="line">-b windowsize   Size of TCP send/receive buffer, in bytes</span><br><span class="line">-B address      Address to bind to when making outgoing connections</span><br><span class="line">-p postfile     File containing data to POST. Remember also to <span class="operator"><span class="keyword">set</span> -T</span><br><span class="line">-u putfile      File containing <span class="keyword">data</span> <span class="keyword">to</span> PUT. Remember also <span class="keyword">to</span> <span class="keyword">set</span> -T</span><br><span class="line">-T content-type Content-type header <span class="keyword">to</span> <span class="keyword">use</span> <span class="keyword">for</span> POST/PUT <span class="keyword">data</span>, eg. </span><br><span class="line">                <span class="string">'application/x-www-form-urlencoded'</span> <span class="keyword">Default</span> <span class="keyword">is</span> <span class="string">'text/plain'</span></span><br><span class="line">-v verbosity    How much troubleshooting info <span class="keyword">to</span> print</span><br><span class="line">-w              Print out results <span class="keyword">in</span> HTML <span class="keyword">tables</span></span><br><span class="line">-i              <span class="keyword">Use</span> HEAD instead <span class="keyword">of</span> <span class="keyword">GET</span></span><br><span class="line">-x attributes   <span class="keyword">String</span> <span class="keyword">to</span> <span class="keyword">insert</span> <span class="keyword">as</span> <span class="keyword">table</span> attributes</span><br><span class="line">-y attributes   <span class="keyword">String</span> <span class="keyword">to</span> <span class="keyword">insert</span> <span class="keyword">as</span> tr attributes</span><br><span class="line">-z attributes   <span class="keyword">String</span> <span class="keyword">to</span> <span class="keyword">insert</span> <span class="keyword">as</span> td <span class="keyword">or</span> th attributes</span><br><span class="line">-C attribute    <span class="keyword">Add</span> cookie, eg. <span class="string">'Apache=1234'</span>. (repeatable)</span><br><span class="line">-H attribute    <span class="keyword">Add</span> Arbitrary header line, eg. </span><br><span class="line">                <span class="string">'Accept-Encoding: gzip'</span> Inserted <span class="keyword">after</span> <span class="keyword">all</span> normal header <span class="keyword">lines</span>. (repeatable)</span><br><span class="line">-A attribute    <span class="keyword">Add</span> Basic WWW Authentication, the attributes <span class="keyword">are</span> a colon separated username <span class="keyword">and</span> <span class="keyword">password</span>.  </span><br><span class="line">-P attribute    <span class="keyword">Add</span> Basic Proxy Authentication, the attributes <span class="keyword">are</span> a colon separated username <span class="keyword">and</span> <span class="keyword">password</span>.</span><br><span class="line">-X proxy:port   Proxyserver <span class="keyword">and</span> port <span class="built_in">number</span> <span class="keyword">to</span> <span class="keyword">use</span></span><br><span class="line">-V              Print <span class="keyword">version</span> <span class="built_in">number</span> <span class="keyword">and</span> exit</span><br><span class="line">-k              <span class="keyword">Use</span> HTTP KeepAlive feature</span><br><span class="line">-d              <span class="keyword">Do</span> <span class="keyword">not</span> <span class="keyword">show</span> percentiles served <span class="keyword">table</span>.</span><br><span class="line">-S              <span class="keyword">Do</span> <span class="keyword">not</span> <span class="keyword">show</span> confidence estimators <span class="keyword">and</span> <span class="keyword">warnings</span>.</span><br><span class="line">-q              <span class="keyword">Do</span> <span class="keyword">not</span> <span class="keyword">show</span> progress <span class="keyword">when</span> doing more than <span class="number">150</span> requests</span><br><span class="line">-g filename     <span class="keyword">Output</span> collected <span class="keyword">data</span> <span class="keyword">to</span> gnuplot <span class="keyword">format</span> file.</span><br><span class="line">-e filename     <span class="keyword">Output</span> CSV file <span class="keyword">with</span> percentages served</span><br><span class="line">-r              Donot exit <span class="keyword">on</span> socket receive <span class="keyword">errors</span>.</span><br><span class="line">-h              Display <span class="keyword">usage</span> information (this message)</span></span><br></pre></td></tr></table></figure>
<ol>
<li>ab -n 1000 -c 10 <a href="http://www.example.com" target="_blank" rel="external">http://www.example.com</a> 并发10个请求，连续请求1000次，每个请求完成之后都会自动断线，然后重连。</li>
<li>ab -n 1000 -c 10 -k <a href="http://www.example.com" target="_blank" rel="external">http://www.example.com</a> 并发10个请求，连续请求1000次，并使用keep-alive方式建立连接</li>
<li>ab -n 1000 -c 10 -g output http:// www.example.com 将测试结果生成文件归档</li>
</ol>
<h3 id="结果分析">结果分析</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">This is ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">1430300</span> $&gt;</span><br><span class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, <span class="keyword">http</span>://www.zeustech.net/</span><br><span class="line">Licensed <span class="built_in">to</span> The Apache Software Foundation, <span class="keyword">http</span>://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.signichat.com (be patient)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Server Software:        nginx/<span class="number">1.6</span>.0                 </span><br><span class="line">    Server Hostname:        www.example.com</span><br><span class="line">    Server Port:            <span class="number">80</span>  </span><br><span class="line"></span><br><span class="line">    Document Path:          api/<span class="built_in">get</span></span><br><span class="line">    Document Length:        <span class="number">11875</span> <span class="keyword">bytes</span></span><br><span class="line"></span><br><span class="line">    Concurrency Level:      <span class="number">25</span>                            <span class="comment">##并发数</span></span><br><span class="line">    Time taken <span class="keyword">for</span> tests:   <span class="number">48.243</span> <span class="built_in">seconds</span>                <span class="comment">##总耗时</span></span><br><span class="line">    Complete requests:      <span class="number">1000</span>                          <span class="comment">##总请求数 </span></span><br><span class="line">    Failed requests:        <span class="number">0</span>                             <span class="comment">##失败的请求数</span></span><br><span class="line">    Write errors:           <span class="number">0</span>                             </span><br><span class="line">    Total transferred:      <span class="number">12404000</span> <span class="keyword">bytes</span>                <span class="comment">##总的数据传输量</span></span><br><span class="line">    HTML transferred:       <span class="number">11875000</span> <span class="keyword">bytes</span>                 </span><br><span class="line">    Requests per <span class="keyword">second</span>:    <span class="number">20.73</span> [<span class="comment">#/sec] (mean)          ##服务器每秒能够处理的请求数        </span></span><br><span class="line">    Time per request:       <span class="number">1206.082</span> [ms] (mean)          <span class="comment">##25个并发时间处理的时间</span></span><br><span class="line">Time per request:       <span class="number">48.243</span> [ms] (mean, across all concurrent requests) <span class="comment">##每个请求处理的时间</span></span><br><span class="line">    Transfer rate:          <span class="number">251.09</span> [Kbytes/<span class="built_in">sec</span>] received  <span class="comment">##每秒传输的数据量</span></span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">    <span class="built_in">min</span>  mean[+/-sd] <span class="built_in">median</span>   <span class="built_in">max</span> </span><br><span class="line">    Connect:      <span class="number">235</span>  <span class="number">235</span>   <span class="number">0.6</span>    <span class="number">235</span>     <span class="number">248</span>    <span class="comment">##建立http连接的时间</span></span><br><span class="line">    Processing:   <span class="number">339</span>  <span class="number">964</span> <span class="number">158.1</span>    <span class="number">962</span>    <span class="number">1440</span>    <span class="comment">##建立http连接到完成接到所有数据的时间</span></span><br><span class="line">    Waiting:      <span class="number">339</span>  <span class="number">963</span> <span class="number">158.1</span>    <span class="number">961</span>    <span class="number">1439</span>    <span class="comment">##建立http连接到接到第一个byte数据的时间</span></span><br><span class="line">    Total:        <span class="number">575</span> <span class="number">1199</span> <span class="number">158.2</span>   <span class="number">1198</span>    <span class="number">1675</span>    <span class="comment">##connect + processing = 总的时间</span></span><br><span class="line"></span><br><span class="line">Percentage <span class="operator">of</span> <span class="operator">the</span> requests served <span class="operator">within</span> <span class="operator">a</span> certain <span class="built_in">time</span> (ms)</span><br><span class="line">    <span class="number">50</span>%   <span class="number">1198</span>        <span class="comment">##http请求发送到50%时，在那一次http请求总共的时间</span></span><br><span class="line">    <span class="number">66</span>%   <span class="number">1271</span></span><br><span class="line">    <span class="number">75</span>%   <span class="number">1310</span></span><br><span class="line">    <span class="number">80</span>%   <span class="number">1332</span></span><br><span class="line">    <span class="number">90</span>%   <span class="number">1399</span></span><br><span class="line">    <span class="number">95</span>%   <span class="number">1443</span></span><br><span class="line">    <span class="number">98</span>%   <span class="number">1489</span></span><br><span class="line">    <span class="number">99</span>%   <span class="number">1589</span></span><br><span class="line">    <span class="number">100</span>%  <span class="number">1675</span> (longest request)</span><br></pre></td></tr></table></figure>
<p>从结果来看，服务器每秒能够处理的最大请求数是20.73个，并不是说能够同一时刻请求的进程数是20个，要想知道服务器每秒能够处理的进程数还需要看load averge:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#uptime</span></span><br><span class="line">11<span class="pseudo">:12</span><span class="pseudo">:55</span> <span class="tag">up</span>  2<span class="pseudo">:36</span>,  5 <span class="tag">users</span>,  <span class="tag">load</span> <span class="rule"><span class="attribute">average</span>:<span class="value"> <span class="number">0.05</span>, <span class="number">0.11</span>, <span class="number">0.16</span>    <span class="number">1</span>分钟，<span class="number">5</span>分钟，<span class="number">15</span>分钟cpu的负载</span></span></span><br></pre></td></tr></table></figure></p>
<p>以上并不是真实测试结果，真实情况是每cpu能够同时处理的进程为3个，两个cpu就是6个，而实际的并发请求是25个，则此时的cpu负载为&gt;4，处于超负荷状态。服务器长期处于超负荷状态是不健康的，会导致请求响应时间持续增加等致命性问题。所以在cpu的配置上需要提高。<br>在保证cpu占用率在70%～80%的情况下，我们还需要考虑内存的占用情况：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#free -m</span><br><span class="line">total       used       free     shared    buffers     cached</span><br><span class="line"><span class="string">Mem:</span>          <span class="number">3992</span>       <span class="number">2399</span>       <span class="number">1593</span>          <span class="number">0</span>        <span class="number">146</span>        <span class="number">845</span></span><br><span class="line">-<span class="regexp">/+ buffers/</span><span class="string">cache:</span>       <span class="number">1406</span>       <span class="number">2585</span></span><br><span class="line"><span class="string">Swap:</span>         <span class="number">3839</span>          <span class="number">0</span>       <span class="number">3839</span></span><br></pre></td></tr></table></figure></p>
<p>其中used是指已经被使用过的内存，并不是正在被占用的内存，所以并不能看出实际的使用量。真正需要监测的是swap交换分区的使用量，当swap的值增加时说明遇到了内存瓶颈。</p>
<p><a href="http://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html" target="_blank" rel="external">理解cpu负载</a><br><a href="http://blog.miniasp.com/post/2008/06/30/Using-ApacheBench-ab-to-to-Web-stress-test.aspx" target="_blank" rel="external">ApacheBench</a></p>
<h2 id="瓶颈分析">瓶颈分析</h2><h3 id="基本步骤">基本步骤</h3><ol>
<li>尽量在局域网内做压测<br>因为实在做压力测试，为的是确定服务器的性能瓶颈，如果测试机本身的输出带宽即是瓶颈，便无法测试出服务器真正的瓶颈。<br>真实环境的网络带宽我们是无法估计的，也不会考虑到带宽的限制。</li>
<li>循序渐进<br>最好是并发数慢慢的提升，以免一下的高并发影响了服务器的性能，而影响接下来是测试。</li>
</ol>
<h3 id="处理器瓶颈">处理器瓶颈</h3><p>当处理器过于繁忙时，无法在要求的时间内给请求以回应，那么就遭遇了processor bottlenecks。<br>当你监控你的处理器时，你可以通过一下几点识别cpu瓶颈：</p>
<ol>
<li>cpu占用率超过80%</li>
<li>系统处理队列的长度为系统cpu数量的2倍，(load average 超过 cpu * 2)</li>
<li>每秒的interrupts或者context switches过高</li>
</ol>
<p>一般造成cpu瓶颈的原因有两个，内存不足，硬盘和网络的中断过多</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="ApacheBench">ApacheBench</h2><p>最近应用要上线，在上线前给做了个压力测试。之前并没有这方面的经验，也只是倒腾过服务器什么的，所以上网查了些压测的资料，整理了自己做压测的过程。<br>服务器: EC2<br>测试对象: app端api]]>
    </summary>
    
      <category term="apachebench" scheme="http://www.syang.xyz/tags/apachebench/"/>
    
      <category term="压力测试" scheme="http://www.syang.xyz/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ganglia]]></title>
    <link href="http://www.syang.xyz/2015/05/08/Ganglia/"/>
    <id>http://www.syang.xyz/2015/05/08/Ganglia/</id>
    <published>2015-05-08T03:16:16.000Z</published>
    <updated>2015-05-12T09:13:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>Ganglia是集群数据监控工具，能从一个集群的整体角度展现数据。主要功能就是收集和跟踪集群的度量数据(cpu, mem, 硬盘利用率，I/O负载，网络流量)，并有图形的方式呈现。<br>Ganglia底层使用RRDTool获得数据<br>Ganglia监控组件主要包括三个部分：gmond, gmetad, ganglia-web：</p>
<h3 id="gmond">gmond</h3><p>gmond(ganglia monitor deamon)运行在集群的每个节点上，收集RRDTool产生的数据；</p>
<ol>
<li>如果它是一个发送者，它会收集基本的指标，如系统负载，cpu利用率。它也可以通过增加C/Python模块发送用户自定义的指标。</li>
<li>如果它是一个接受者，它将聚集来自其他主机发送给它的所有指标，并保存到缓存中。</li>
</ol>
<h3 id="gmetad">gmetad</h3><p>gmetad(ganglia metadata deamon)运行在监控服务器上，收集每个gmond的数据。</p>
<h3 id="ganglia-web">ganglia-web</h3><p>Ganglia-web是一个php实现的web front end，可通过它直观的查看各种集群数据图表。</p>
<h2 id="安装">安装</h2><p>可通过二进制包来安装，也可通过系统自带的安装工具安装，如ubuntu的apt-get<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install ganglia-monitor ganglia-monitor-<span class="keyword">python</span> gmetad</span><br></pre></td></tr></table></figure></p>
<h2 id="配置">配置</h2><h3 id="防火墙">防火墙</h3><p>gmond默认的监听端口是UDP:8649<br>gmetad默认的监听端口是:8652</p>
<h2 id="问题">问题</h2><h3 id="gmetad_dead_but_subsys_locked">gmetad dead but subsys locked</h3><p>查看/var/log/messages<br>将/var/lib/ganglia的拥有者改成ganglia<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R <span class="string">ganglia:</span>ganglia <span class="regexp">/var/</span>lib/ganglia</span><br></pre></td></tr></table></figure></p>
<h3 id="gmond_dead_but_subsys_locked">gmond dead but subsys locked</h3><p>有可能有其他的进程占用了所需端口,杀死占用端口进程，开启gmond</p>
<p>好吧！我最后还是没能安装成功，主要是图表显示不出来</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>Ganglia是集群数据监控工具，能从一个集群的整体角度展现数据。主要功能就是收集和跟踪集群的度量数据(cpu, mem, 硬盘利用率，I/O负载，网络流量)，并有图形的方式呈现。<br>Ganglia底层使用RRDTool获得数据<b]]>
    </summary>
    
      <category term="ganglia" scheme="http://www.syang.xyz/tags/ganglia/"/>
    
      <category term="gmetad，云监控" scheme="http://www.syang.xyz/tags/gmetad%EF%BC%8C%E4%BA%91%E7%9B%91%E6%8E%A7/"/>
    
      <category term="gmond" scheme="http://www.syang.xyz/tags/gmond/"/>
    
      <category term="linux" scheme="http://www.syang.xyz/tags/linux/"/>
    
      <category term="web" scheme="http://www.syang.xyz/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在github pages上建立自己的博客]]></title>
    <link href="http://www.syang.xyz/2015/05/07/hello-world/"/>
    <id>http://www.syang.xyz/2015/05/07/hello-world/</id>
    <published>2015-05-07T15:27:10.000Z</published>
    <updated>2015-05-07T15:27:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Github_Pages">Github Pages</h2><p>  Github pages是用于展示自己github所有仓库的web页面,它有300M的免费空间可使用，介于它免费稳定，是搭建blog的好地方;<br>  github pages还提供Automatic Page Generator来生成静态页面，为不懂web技术的博主们提供了便利,当然我们也可以在本地使用其他更加方便的blog框架来建站，如Hexo;<br>  如果github被墙，还有gitcafe可用</p>
<hr>
<h2 id="github">github</h2><p>如果pc上没有git和node的话还需要安装git和node，下面的步骤需要用到。我用的是ubuntu系统，所以主要以ubuntu为例。</p>
<h3 id="创建github帐号">创建github帐号</h3><ol>
<li>首先申请一个github的帐号</li>
<li>点击右上角按钮创建new repository新仓库</li>
<li>命名:用户名.github.io，如zhaoxiangyang.github.io</li>
<li>选择public</li>
</ol>
<h3 id="添加公钥">添加公钥</h3><ol>
<li>进到用户主目录下的.ssh目录，查看id_rsa.pub</li>
<li><p>如果没有id_rsa.pub</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa  可以添加口令也可直接<span class="keyword">enter</span>到底</span><br><span class="line">ssh-<span class="keyword">add</span>   可添加私钥到ssh-agent的缓存</span><br></pre></td></tr></table></figure>
</li>
<li><p>将id_rsa.pub中的全部内容复制到github settings中的ssh keys中<br>可以通过下面的命令，查看设置是否成功，git@github.com的部分不要修改：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">yes</span><br><span class="line">成功的结果</span><br><span class="line">Hi zhaoxianyang! You have successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="创建本地仓库">创建本地仓库</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="class">.name</span> <span class="string">"zhaoxianyang"</span> <span class="comment">//用户名，用作git提交作记录</span></span><br><span class="line">git config --global user<span class="class">.email</span> <span class="string">"zhaoxianyang385@gmail.com"</span> <span class="comment">//自己的邮箱</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>在本地创建一个blog目录</li>
<li>进入blog后git clone git@github.com:zhaoxianyang/zhaoxianyang.github.io.git</li>
<li>可以创建一个readme文件 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add readme<span class="class">.md</span></span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin git@github<span class="class">.com</span>:zhaoxianyang/zhaoxianyang<span class="class">.github</span><span class="class">.io</span><span class="class">.git</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Generating SSH Keys</a></p>
<h2 id="博客神器Hexo">博客神器Hexo</h2><p>神奇的博客框架hexo，小白建站全靠它了，hexo是nodejs下的一个插件，这就是要提前安装node的原因。<br>下面以指令的形式详细介绍每一步的步骤：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br><span class="line">hexo init hexo    初始化一个blog目录，名字你定</span><br><span class="line"><span class="keyword">cd</span> hexo</span><br><span class="line">npm install    将hexo需要的其他包安装</span><br><span class="line">hexo server (s)   启动博客服务器，localhost:4000</span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">generate</span> (<span class="keyword">g</span>) 生成静态页面</span><br><span class="line">hexo deploy (<span class="keyword">d</span>) 将静态页面部署到远端的仓库，也就是github pages</span><br></pre></td></tr></table></figure></p>
<h3 id="主题">主题</h3><p>github上有很多其他博主开源的主题，一条指令就可以占有它<br>git clone <a href="https://github.com/raytaylorlin/hexo-theme-raytaylorism.git" target="_blank" rel="external">https://github.com/raytaylorlin/hexo-theme-raytaylorism.git</a> themes/raytaylorism</p>
<p>好了，你的博客搭建好了，下面你就自己慢慢的折腾它吧…</p>
<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="参考">参考</h2><p><a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">cnfeat的博客</a><br><a href="https://github.com/wuchong/jacman" target="_blank" rel="external">本站主题来源，大家可以点这里</a><br><a href="https://github.com/raytaylorlin/hexo-theme-raytaylorism" target="_blank" rel="external">参考主题, 寿寿的主题，只适合hexo@2.8.*</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Github_Pages">Github Pages</h2><p>  Github pages是用于展示自己github所有仓库的web页面,它有300M的免费空间可使用，介于它免费稳定，是搭建blog的好地方;<br>  github pages还提供Auto]]>
    </summary>
    
      <category term="blog" scheme="http://www.syang.xyz/tags/blog/"/>
    
      <category term="github" scheme="http://www.syang.xyz/tags/github/"/>
    
      <category term="hexo" scheme="http://www.syang.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nginx 配置]]></title>
    <link href="http://www.syang.xyz/2015/05/05/Nginx-%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.syang.xyz/2015/05/05/Nginx-配置/</id>
    <published>2015-05-05T09:06:32.000Z</published>
    <updated>2015-05-06T06:15:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Nginx安装配置">Nginx安装配置</h2><h3 id="download">download</h3><p> wget <a href="http://nginx.org/download/nginx-1.6.0.tar.gz" target="_blank" rel="external">http://nginx.org/download/nginx-1.6.0.tar.gz</a><br> tar zxf nginx-1.6.0.tar.gz</p>
<hr>
<h3 id="configure">configure</h3><ol>
<li>需要根据ip做国家或者城市的分流的话可使用geoip模块；<br> 在添加geoip模块之前需要，下载并安装相关的库文件<br> wget <a href="http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz" target="_blank" rel="external">http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz</a><br> wget <a href="http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz" target="_blank" rel="external">http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz</a></li>
<li>对代码有压缩要求的需启用gzip模块；</li>
<li>使用https协议的话，则需要添加http_ssl_module模块；</li>
</ol>
<ul>
<li>编译安装<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> nginx-1.6.0</span><br><span class="line">./configure --with-http_ssl_module --with-http_geoip_module --with-http_gzip_static_module --prefix=/<span class="keyword">app</span>-data/nginx --http-<span class="keyword">log</span>-path=/<span class="keyword">app</span>-util/<span class="keyword">log</span>/nginx/base/access.<span class="keyword">log</span> --<span class="keyword">error</span>-<span class="keyword">log</span>-path=/<span class="keyword">app</span>-util/<span class="keyword">log</span>/nginx/base/<span class="keyword">error</span>.<span class="literal">log</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="config">config</h3><p>nginx.conf:通用全局的配置，如gzip压缩，geoip模块配置，work_process一般是核*2<br>site-available:已搭建服务<br>site-enabled:正使用的服务<br>内部配置文件需改动部分一般只有server_name和log地址。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="title">set</span> <span class="variable">$root_folder</span> /app-data/www/域名/web;</span><br><span class="line">    <span class="title">root</span> <span class="variable">$root_folder</span>;</span><br><span class="line">    <span class="title">server_name</span> 域名;</span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ .(zip|js|css)</span> &#123;</span><br><span class="line">        <span class="title">expires</span> <span class="number">1d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ .(dzi|gif|jpeg|png|jpg|swf|ico)</span> &#123;</span><br><span class="line">        <span class="title">expires</span> <span class="number">1m</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ /index.php</span> &#123;</span><br><span class="line">        <span class="title">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="title">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$root_folder</span>/index.php;</span><br><span class="line">        <span class="title">include</span>        fastcgi_params;</span><br><span class="line">        <span class="title">fastcgi_param</span> PATH_INFO         <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        <span class="title">fastcgi_param</span> HTTP_REFERER      <span class="variable">$http_referer</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ /</span> &#123;</span><br><span class="line">        <span class="title">rewrite</span><span class="regexp"> ^/(.*)$</span> /index.php <span class="built_in">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">error_log</span>  /app-util/log/nginx/A/error.log;</span><br><span class="line">    <span class="title">access_log</span> /app-util/log/nginx/A/access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>启动<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/app-data/</span>nginx<span class="regexp">/sbin/</span>nginx</span><br><span class="line">如果只修改配置文件，则只须重新加载配置文件</span><br><span class="line"><span class="regexp">/app-data/</span>nginx<span class="regexp">/sbin/</span>nginx -s reload</span><br><span class="line">在使用ssl模块的情况下，可能有加载证书的过程，所以修改完配置文件可能需要关闭nginx，再启动才能有效</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Nginx负载均衡配置">Nginx负载均衡配置</h2><p>应用到的模块主要是upstream<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">upstream servers&#123;</span><br><span class="line">    server <span class="number">10.144</span>.<span class="number">22.204</span>:<span class="number">80</span> <span class="variable">weight=</span><span class="number">1</span> <span class="variable">max_fails=</span><span class="number">2</span> <span class="variable">fail_timeout=</span><span class="number">2</span>; </span><br><span class="line">    server www.baidu.com <span class="variable">weight=</span><span class="number">2</span> <span class="variable">max_fails=</span><span class="number">2</span> <span class="variable">fail_timeout=</span><span class="number">2</span>;</span><br><span class="line">    server <span class="number">10.163</span>.<span class="number">247.211</span>:<span class="number">80</span> <span class="variable">weight=</span><span class="number">1</span> <span class="variable">max_fails=</span><span class="number">2</span> <span class="variable">fail_timeout=</span><span class="number">2</span> down;</span><br><span class="line">&#125;</span><br><span class="line">weight:权重，上面两者的权重都为<span class="number">1</span></span><br><span class="line">max_fails:允许访问的最大失败次数，超过nginx就会将该站点标记为不可用。</span><br><span class="line">fail_timeout:访问超时</span><br><span class="line">down:表示该台主机暂时不可用</span><br></pre></td></tr></table></figure></p>
<p>根据url分流<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="title">server_name</span> test.qingvoice.com;</span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">proxy_pass</span>  <span class="url">http://testservers</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">location</span> <span class="regexp">~* "api"</span>&#123;</span><br><span class="line">        <span class="title">proxy_pass</span>  <span class="url">http://testpc</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>server:首先去查找匹配端口，再去匹配server_name<br>location:可匹配url去请求不同代理服务器，本机若要做站点，则端口需和主机不同。以上的配置对链接中含api的url可导流先前配置的upstream中</p>
<p>更加详细的Nginx配置文件介绍可查看<a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="external">nginx</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Nginx安装配置">Nginx安装配置</h2><h3 id="download">download</h3><p> wget <a href="http://nginx.org/download/nginx-1.6.0.tar.gz" target="_bla]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[BASH--string]]></title>
    <link href="http://www.syang.xyz/2015/05/05/BASH-string/"/>
    <id>http://www.syang.xyz/2015/05/05/BASH-string/</id>
    <published>2015-05-05T07:21:11.000Z</published>
    <updated>2015-05-05T08:15:27.000Z</updated>
    <content type="html"><![CDATA[<p>有时候我们需要对变量进行一些操作，比如截取，替换，删除等操作，很多同学会使用awk, sed 或cut等命令来干这事，其实，bash的内置的变量操作就可以干这个事。下面说明一些常用的方法：</p>
<p>这些操作需要使用 ${var} 这种变量的写法（用花括号）。</p>
<p>${\#var} 输出 var的字符串长度</p>
<p>${var:pos:len} 你可以理解为变量的切片操作。如：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="variable"><span class="keyword">var</span></span>=<span class="number">0123456789</span></span><br><span class="line">&gt; echo $&#123;<span class="variable"><span class="keyword">var</span></span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">23456789</span></span><br><span class="line">&gt; echo $&#123;<span class="variable"><span class="keyword">var</span></span>:<span class="number">2</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">23</span></span><br><span class="line">&gt; echo $&#123;<span class="variable"><span class="keyword">var</span></span>:<span class="number">2</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="number">234</span></span><br><span class="line">&gt; echo $&#123;<span class="variable"><span class="keyword">var</span></span>::<span class="number">1</span>&#125;</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt; echo $&#123;<span class="variable"><span class="keyword">var</span></span>::-<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">01234567</span></span><br></pre></td></tr></table></figure>
<p>${var#word} 或 ${var##word} 删除匹配word的前缀，#为最短匹配，##为最长匹配</p>
<p>${var%word} 或 ${var%%word} 删除匹配word的后缀，%为最短匹配，%%为最长匹配</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span>=ababcdcd</span><br><span class="line">&gt; <span class="keyword">echo</span> $&#123;<span class="keyword">var</span><span class="comment">#a*b&#125;</span></span><br><span class="line">abcdcd</span><br><span class="line">&gt; <span class="keyword">echo</span> $&#123;<span class="keyword">var</span><span class="comment">##a*b&#125;</span></span><br><span class="line">cdcd</span><br><span class="line">&gt; <span class="keyword">echo</span> $&#123;<span class="keyword">var</span>%c*d&#125;</span><br><span class="line">ababcd</span><br><span class="line">&gt; <span class="keyword">echo</span> $&#123;<span class="keyword">var</span>%c*d&#125;</span><br><span class="line">ababcd</span><br><span class="line">&gt; <span class="keyword">echo</span> $&#123;<span class="keyword">var</span>%%c*d&#125;</span><br><span class="line">abab</span><br></pre></td></tr></table></figure>
<p>${var/pattern/replacement} 替换第一个匹配</p>
<p>${var//pattern/replacement} 替换所有的匹配</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>=ababcdcd</span><br><span class="line">&gt; <span class="keyword">echo</span> $&#123;<span class="keyword">var</span>/ab/<span class="number">01</span>&#125;</span><br><span class="line"><span class="number">01</span>abcdcd</span><br><span class="line">&gt; <span class="keyword">echo</span> $&#123;<span class="keyword">var</span><span class="comment">//ab/01&#125;</span></span><br><span class="line"><span class="number">0101</span>cdcd</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候我们需要对变量进行一些操作，比如截取，替换，删除等操作，很多同学会使用awk, sed 或cut等命令来干这事，其实，bash的内置的变量操作就可以干这个事。下面说明一些常用的方法：</p>
<p>这些操作需要使用 ${var} 这种变量的写法（用花括号）。</p>
]]>
    </summary>
    
      <category term="bash" scheme="http://www.syang.xyz/tags/bash/"/>
    
      <category term="linux" scheme="http://www.syang.xyz/tags/linux/"/>
    
      <category term="string" scheme="http://www.syang.xyz/tags/string/"/>
    
      <category term="Linux" scheme="http://www.syang.xyz/categories/Linux/"/>
    
  </entry>
  
</feed>